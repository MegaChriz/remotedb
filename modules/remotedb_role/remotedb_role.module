<?php

/**
 * @file
 * Assign and unassign roles based on subscriptions in remote database.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\remotedb\Entity\RemotedbInterface;
use Drupal\remotedb_role\Plugin\Action\AssignRoles;
use Drupal\user\UserInterface;

// ---------------------------------------------------------------------------
// DRUPAL HOOKS
// ---------------------------------------------------------------------------

/**
 * Implements hook_help().
 */
function remotedb_role_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'remotedb_role.admin_settings_form':
      $output = '<p>' . t("On this page you can configure which roles an user should be assigned when they own a certain subscription. <strong>Warning</strong>: when an user doesn't own one of the specified subscriptions for a certain role, this role will be automatically revoked for that user.") . '</p>';
      $output .= '<p>' . t('The roles are assigned/unassigned upon user login.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_user_login().
 *
 * Assigns/unassigns roles for account.
 */
function remotedb_role_user_login(UserInterface $account) {
  if ($account->hasPermission('remotedb_role.bypass')) {
    // @todo move to action.
    return;
  }

  // Apply action on entity.
  $action = \Drupal::service('plugin.manager.action')
    ->createInstance('remotedb_role_assign_roles');
  $action->execute($account);

  // Display debug information, if configured.
  if (\Drupal::config('remotedb_role.settings')->get('debug')) {
    $assigned = $action->getAssignedRoles();
    $unassigned = $action->getUnassignedRoles();

    \Drupal::messenger()->addStatus(t('Assigned: @assigned', [
      '@assigned' => !empty($assigned) ? implode(', ', $assigned) : 'none',
    ]));
    \Drupal::messenger()->addStatus(t('Unassigned: @unassigned', [
      '@unassigned' => !empty($unassigned) ? implode(', ', $unassigned) : 'none',
    ]));
  }
}
