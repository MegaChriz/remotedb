<?php

/**
 * @file
 * Enables registration and authentication via remote database.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\user\UserInterface;
use Drupal\remotedb\Entity\RemotedbInterface;
use Drupal\remotedbuser\Controller\RemotedbUserController;
use Drupal\remotedbuser\Exception\RemotedbExistingUserException;

// ---------------------------------------------------------------------------
// USER HOOKS
// ---------------------------------------------------------------------------

/**
 * Implements hook_user_insert().
 *
 * @FIXME
 * The $edit and $category parameters are gone in Drupal 8. They have been left
 * here in order to prevent 'undefined variable' errors, but they will never
 * actually be passed to this hook. You'll need to modify this function and
 * remove every reference to them.
 */
function remotedbuser_user_insert(UserInterface $account, $edit = NULL) {
  // Perform the same actions as when updating.
  return remotedbuser_user_update($edit, $account);
}

/**
 * Implements hook_user_update().
 *
 * @FIXME
 * The $edit and $category parameters are gone in Drupal 8. They have been left
 * here in order to prevent 'undefined variable' errors, but they will never
 * actually be passed to this hook. You'll need to modify this function and
 * remove every reference to them.
 */
function remotedbuser_user_update(UserInterface $account, $edit = NULL) {
  // Check if a remote user was coming from the remote database.
  if (!empty($account->from_remotedb)) {
    // We assume that the local account was updated with information from the
    // remote account. So there is no need to update the remote account.
    return;
  }

  // Create remote account based on the local account.
  $controller = entity_get_controller('remotedb_user');
  $remote_account = $controller->fromAccount($account);

  // Save remote account.
  $result = $remote_account->save();
  if (!$result) {
    drupal_set_message('Er ging iets mis bij het opslaan van uw account. Neem contact met ons op.', 'error');
    \Drupal::logger('remotedb')->error('Saving account failed for user %username (%uid)', ['%username' => $account->getUsername(), '%uid' => $account->id()]);
  }
  elseif (empty($account->remotedb_uid) || $remote_account->uid != $account->remotedb_uid) {
    // Save remote account uid on local account.
    $account->remotedb_uid = $remote_account->uid;
    db_update('users')
      ->fields(['remotedb_uid' => $remote_account->uid])
      ->condition('uid', $account->id())
      ->execute();
  }
}

/**
 * Implements hook_user_view().
 *
 * Shows remote database user ID.
 */
function remotedbuser_user_view(array &$build, UserInterface $account) {
  // Add ID details (if available).
  if (!empty($account->remotedb_uid)) {
    $account->content['remotedb'] = [
      '#type' => 'user_profile_category',
      '#title' => t('Remote Database'),
      '#access' => \Drupal::currentUser()->hasPermission('administer users'),
      'remotedb_uid' => [
        '#type' => 'user_profile_item',
        '#title' => t('Remote database UID'),
        '#markup' => Html::escape($account->remotedb_uid),
      ],
      '#weight' => 1,
    ];
  }
}

// ---------------------------------------------------------------------------
// ENTITY API HOOKS
// ---------------------------------------------------------------------------

/**
 * Implements hook_entity_property_info_alter().
 *
 * Describe remotedb_uid field.
 */
function remotedbuser_entity_property_info_alter(&$info) {
  $user_properties = &$info['user']['properties'];
  $user_properties['remotedb_uid'] = [
    'label' => t('Remote database UID'),
    'type' => 'integer',
    'description' => t('The ID of the user in the remote database.'),
    'schema field' => 'remotedb_uid',
  ];
}

// ---------------------------------------------------------------------------
// VIEWS HOOKS
// ---------------------------------------------------------------------------

/**
 * Implements hook_views_api().
 */
function remotedbuser_views_api() {
  return [
    'api' => 3,
  ];
}

// ---------------------------------------------------------------------------
// FORM ALTERS
// ---------------------------------------------------------------------------

/**
 * Implements hook_form_alter().
 */
function remotedbuser_form_alter(&$form, FormStateInterface $form_state) {
  $replacements = [
    // Replace login validation handler. Login needs to be checked via the remote database.
    'user_login_authenticate_validate' => 'remotedbuser_login_authenticate_validate',
  ];

  if (isset($form['#validate']) && is_array($form['#validate'])) {
    foreach ($replacements as $search => $replace) {
      $key = array_search($search, $form['#validate']);
      if ($key !== FALSE) {
        $form['#validate'][$key] = $replace;
      }
    }
  }
}

/**
 * Validation handler for user login forms.
 *
 * Authenticates users.
 *
 * @return void
 *
 * @see remotedbuser_form_alter()
 */
function remotedbuser_login_authenticate_validate($form, &$form_state) {
  $password = trim($form_state['values']['pass']);
  if (!empty($form_state['values']['name']) && !empty($password)) {
    $name = $form_state['values']['name'];
    $form_state['uid'] = remotedbuser_authenticate($name, $password);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for form user_register_form().
 *
 * @return void
 */
function remotedbuser_form_user_register_form_alter(&$form, $form_state) {
  // Add validation functions for checking existing mail and username.
  $form['#validate'][] = 'remotedbuser_account_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for form user_profile_form().
 *
 * Makes Remote database user ID editable.
 *
 * @return void
 */
function remotedbuser_form_user_profile_form_alter(&$form, $form_state) {
  if (empty($form['#user_category']) || $form['#user_category'] != 'account') {
    return;
  }
  // Add field for remote database user.
  $form['remotedb'] = [
    '#type' => 'fieldset',
    '#title' => t('Remote database'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => \Drupal::currentUser()->hasPermission('remotedb.administer'),
  ];
  $form['remotedb']['remotedb_uid'] = [
    '#type' => 'textfield',
    '#title' => t('Remote database user ID'),
    '#default_value' => $form['#user']->remotedb_uid,
  ];

  // Add validation functions for changing mail and username.
  $form['#validate'][] = 'remotedbuser_account_form_validate';
}

/**
 * Form validation handler for user_account_form().
 *
 * @see user_account_form()
 */
function remotedbuser_account_form_validate($form, &$form_state) {
  $rd_controller = entity_get_controller('remotedb_user');
  if ($form['#user_category'] == 'account' || $form['#user_category'] == 'register') {
    $account = $form['#user'];
    $is_new = empty($account->uid);
    $is_admin = !empty($form['administer_users']['#value']);
    $name = isset($form_state['values']['name']) ? $form_state['values']['name'] : NULL;
    $mail = isset($form_state['values']['mail']) ? $form_state['values']['mail'] : NULL;

    if ($is_new && $is_admin && \Drupal::currentUser()->hasPermission('remotedbuser.create')) {
      // An administrator is creating an account.
      if (form_get_errors()) {
        // Don't continue in case of other errors.
        return;
      }

      // Get account from the remote database, if it exists.
      $remote_account = $rd_controller->loadBy($mail, RemotedbUserController::BY_MAIL);
      if ($remote_account) {
        // Account exists. Make sure that the chosen username is not already taken if the
        // remote account has an other username.
        if ($remote_account->name != $name) {
          if (!$rd_controller->validateName($name, $account)) {
            form_set_error('name', t('The name %name is already taken.', ['%name' => $name]));
          }
        }
      }
    }
    else {
      // The account is an existing account or the account is not created by an administrator.
      // Validate new or changing username.
      if ($name) {
        if (!$rd_controller->validateName($name, $account)) {
          $message = t('The name %name is already taken.', ['%name' => $name]);
          if (remotedbuser_get_remote_user_access()) {
            // @FIXME
            // url() expects a route name or an external URI.
            // $message = t('An user with the name %name already exists on the remote database. You can copy this user over on the <a href="@link">@title</a> page.', array(
            //               '%name' => $name,
            //               '@link' => url('admin/people/remotedbuser-get'),
            //               '@title' => t('Get remote user'),
            //             ));
          }
          form_set_error('name', $message);
        }
      }

      // Validate the e-mail address, and check if it is taken by an existing user in the remote database.
      if (!$rd_controller->validateMail($mail, $account)) {
        // The mail address is already taken.
        if (\Drupal::currentUser()->uid) {
          // An authenticated user is editing account data.
          $message = t('The e-mail address %email is already taken.', ['%email' => $mail]);
          if (remotedbuser_get_remote_user_access()) {
            // @FIXME
            // url() expects a route name or an external URI.
            // $message = t('An user with the e-mail address %email already exists on the remote database. You can copy this user over on the <a href="@link">@title</a> page.', array(
            //               '%email' => $mail,
            //               '@link' => url('admin/people/remotedbuser-get'),
            //               '@title' => t('Get remote user'),
            //             ));
          }
          form_set_error('mail', $message);
        }
        else {
          form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', ['%email' => $mail, '@password' => Url::fromRoute('user.pass')]));
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_pass().
 *
 * @see remotedbuser_form_user_pass_validate()
 */
function remotedbuser_form_user_pass_alter(&$form, $form_state) {
  // Replace user_pass_validate() with remotedbuser's version.
  $key = array_search('user_pass_validate', $form['#validate']);
  if ($key !== FALSE) {
    $form['#validate'][$key] = 'remotedbuser_form_user_pass_validate';
  }
}

/**
 * Validation handler for the "Request new password" form.
 *
 * Checks if the user's name or user's mail address exists in the remote database.
 * This validation handler is used in place of user_pass_validate().
 *
 * @see remotedbuser_form_user_pass_alter()
 */
function remotedbuser_form_user_pass_validate($form, &$form_state) {
  // Search in the local database first.
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['mail' => $name, 'status' => '1']);
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $name, 'status' => '1']);
    $account = reset($users);
  }
  if (isset($account->uid)) {
    // Account found locally.
    $form_state->setValueForElement(['#parents' => ['account']], $account);
  }
  else {
    // Account not found locally. Search in the remote database.
    $rd_controller = entity_get_controller('remotedb_user');
    // Try to load by email.
    $remote_account = $rd_controller->loadBy($name, RemotedbUserController::BY_MAIL);
    if (!$remote_account) {
      // No success, try to load by name.
      $remote_account = $rd_controller->loadBy($name, RemotedbUserController::BY_NAME);
    }
    if (isset($remote_account->uid)) {
      // Copy over account data.
      $account = $remote_account->toAccount();
      $account->save();
    }
    // Follow the usual validation.
    return user_pass_validate($form, $form_state);
  }
}
