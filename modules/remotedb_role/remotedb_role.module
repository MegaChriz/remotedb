<?php
/**
 * @file
 * Temporary path to trigger remote database to get data from afas
 */

// ---------------------------------------------------------------------------
// DRUPAL HOOKS
// ---------------------------------------------------------------------------

/**
 * Implements hook_menu().
 * @return array
 */
function remotedb_role_menu() {
  $items = array();

  $items['admin/config/system/remotedb/roles'] = array(
    'title' => 'Role assign',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remotedb_role_settings'),
    'access arguments' => array('access RemoteDB administration page'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'remotedb_role.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 *
 * @param string $path
 * @param string $arg
 *
 * @return string
 */
function remotedb_role_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/config/system/remotedb/roles':
      $output = '<p>' . t("On this page you can configure which roles an user should be assigned when they own a certain subscription. <strong>Warning</strong>: when an user doesn't own one of the specified subscriptions for a certain role, this role will be automatically revoked for that user.") . '</p>';
      $output .= '<p>' . t("The roles are assigned/unassigned upon user login.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function remotedb_role_permission() {
  return array(
    'bypass automatic role assignment' => array(
      'title' => t('Bypass automatic role assignment'),
      'description' => t('Users with this permission are ignored when roles are automatically assigned/unassigned.'),
    ),
  );
}

/**
 * Implements hook_user_login().
 *
 * Assigns/Unassigns roles for account.
 *
 * @param array $edit
 * @param object $account
 *
 * @return void
 */
function remotedb_role_user_login($edit, $account) {
  $changes = remotedb_role_assign_roles($account);
  if (variable_get('remotedb_role_debug', FALSE)) {
    $assigned = implode(', ', $changes['assigned']);
    $unassigned = implode(', ', $changes['unassigned']);
    drupal_set_message(t('Assigned: @assigned', array('@assigned' => $assigned)), 'status', FALSE);
    drupal_set_message(t('Unassigned: @unassigned', array('@unassigned' => $unassigned)), 'status', FALSE);
  }
}

// ---------------------------------------------------------------------------
// UTIL
// ---------------------------------------------------------------------------

/**
 * Assign/unassign roles based on the subscriptions the user has.
 *
 * @param object $account
 *   The user account to assign/unassign roles for
 *
 * @return array
 *   An array containing the roles that were assigned/unassigned:
 *   - assigned: (array) roles that were assigned
 *   - unassigned: (array) roles that were unassigned
 */
function remotedb_role_assign_roles($account) {
  $assign = array();
  $unassign = array();
  $changed = FALSE;

  if (!user_access('bypass automatic role assignment', $account)) {
    $role_names = user_roles();
    $role_settings = remotedb_role_get_active_settings();
    $remotedb_subscriptions = RemoteDB::get()->sendRequest('dbsubscription.retrieve', $account->mail, REMOTEDB_USER_BY_MAIL)->getResult();

    if (count($remotedb_subscriptions) > 0) {
      // Loop through all roles and prepare a list of assign/unassign roles.
      foreach ($role_settings as $rid => $role_setting) {
        $unassign[$rid] = $role_names[$rid];
        foreach ($remotedb_subscriptions as $remotedb_subscription) {
          if (in_array($remotedb_subscription['subscription_id'], $role_setting['subscriptions'])) {
            $assign[$rid] = $role_names[$rid];
            unset($unassign[$rid]);
          }
        }
      }

      // Unassign roles
      if (count($unassign) > 0) {
        foreach ($unassign as $rid => $role_name) {
          if (isset($account->roles[$rid])) {
            unset($account->roles[$rid]);
            $changed = TRUE;
          }
        }
      }
      // Assign roles
      if (count($assign) > 0) {
        foreach ($assign as $rid => $role_name) {
          if (!isset($account->roles[$rid])) {
            $account->roles[$rid] = $role_names[$rid];
            $changed = TRUE;
          }
        }
      }
    }
  }

  if ($changed) {
    user_save($account);
  }

  return array(
    'assigned' => $assign,
    'unassigned' => $unassign,
  );
}

/**
 * Returns the settings for the roles that may be automatically assigned/unassigned.
 *
 * @return array
 */
function remotedb_role_get_active_settings() {
  static $settings = array();

  if (count($settings) > 0) {
    return $settings;
  }

  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  if (count($roles) > 0) {
    foreach ($roles as $rid => $role_name) {
      if (variable_get('remotedb_role_' . $rid . '_active', 0)) {
        if ($subscriptions = variable_get('remotedb_role_' . $rid . '_subscriptions', '')) {
          $subscriptions = explode("\n", $subscriptions);
          // Trim values.
          foreach ($subscriptions as $index => $subscription) {
             $subscriptions[$index] = trim($subscription);
          }
          $settings[$rid]['subscriptions'] =  $subscriptions;
        }
      }
    }
  }
  return $settings;
}
