<?php

/**
 * @file
 * Enables registration and authentication via remote database.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\remotedbuser\Entity\RemotedbUserStorageInterface;
use Drupal\user\UserInterface;

/*******************************************************************************
 * ACCESS
 ******************************************************************************/

/**
 * Checks if user may retrieve users from the remote database.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   (optional) The account to check access for.
 */
function remotedbuser_get_remote_user_access(AccountInterface $account = NULL) {
  if (empty($account)) {
    $account = \Drupal::currentUser();
  }
  return $account->hasPermission('remotedb.administer') || $account->hasPermission('remotedbuser.getuser');
}

/*******************************************************************************
 * USER HOOKS
 ******************************************************************************/

/**
 * Implements hook_user_presave().
 */
function remotedbuser_user_presave(UserInterface $account) {
  // Check if a remote user was coming from the remote database.
  if (!empty($account->from_remotedb)) {
    // We assume that the local account was updated with information from the
    // remote account. So there is no need to update the remote account.
    return;
  }

  // Create remote account based on the local account.
  $remote_account = \Drupal::entityTypeManager()->getStorage('remotedb_user')->fromAccount($account);

  // Save remote account.
  $result = $remote_account->save();
  if (!$result) {
    \Drupal::messenger()->addError('Er ging iets mis bij het opslaan van uw account. Neem contact met ons op.');
    \Drupal::logger('remotedb')->error('Saving account failed for user %username (%uid)', ['%username' => $account->getUsername(), '%uid' => $account->id()]);
  }
  elseif (empty($account->remotedb_uid->value) || $remote_account->uid != $account->remotedb_uid) {
    // Save remote account uid on local account.
    $account->remotedb_uid->value = $remote_account->uid;
  }
}

/**
 * Implements hook_user_view().
 *
 * Shows remote database user ID.
 */
function _remotedbuser_user_view(array &$build, UserInterface $account) {
  // Add ID details (if available).
  if (!empty($account->remotedb_uid)) {
    $account->content['remotedb'] = [
      '#type' => 'user_profile_category',
      '#title' => t('Remote Database'),
      '#access' => \Drupal::currentUser()->hasPermission('administer users'),
      'remotedb_uid' => [
        '#type' => 'user_profile_item',
        '#title' => t('Remote database UID'),
        '#markup' => Html::escape($account->remotedb_uid->value),
      ],
      '#weight' => 1,
    ];
  }
}

/*******************************************************************************
 * ENTITY API HOOKS
 ******************************************************************************/

/**
 * Implements hook_entity_base_field_info_alter().
 */
function remotedbuser_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $fields['remotedb_uid'] = BaseFieldDefinition::create('integer')
      ->setName('remotedb_uid')
      ->setTargetEntityTypeId('user')
      ->setProvider('remotedbuser')
      ->setLabel(t('Remote database UID'))
      ->setDescription(t('The ID of the user in the remote database.'))
      ->setDefaultValue(0);

    return $fields;
  }
}

/*******************************************************************************
 * VIEWS HOOKS
 ******************************************************************************/

/**
 * Implements hook_views_api().
 */
function _remotedbuser_views_api() {
  return [
    'api' => 3,
  ];
}

/*******************************************************************************
 * FORM ALTERS
 ******************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter() for form user_register_form().
 */
function remotedbuser_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  // Add validation functions for checking existing mail and username.
  $form['#validate'][] = 'remotedbuser_account_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for form user_form().
 *
 * Makes Remote database user ID editable.
 */
function remotedbuser_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  $account = $form_state->getBuildInfo()['callback_object']->getEntity();

  // Add field for remote database user.
  $form['remotedb'] = [
    '#type' => 'fieldset',
    '#title' => t('Remote database'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => \Drupal::currentUser()->hasPermission('remotedb.administer'),
  ];
  $form['remotedb']['remotedb_uid'] = [
    '#type' => 'textfield',
    '#title' => t('Remote database user ID'),
    '#default_value' => $account->remotedb_uid->value,
  ];

  // Add validation functions for changing mail and username.
  $form['#validate'][] = 'remotedbuser_account_form_validate';
}

/**
 * Form validation handler for user_form().
 */
function remotedbuser_account_form_validate(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\remotedbuser\Entity\RemotedbUserStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('remotedb_user');
  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getBuildInfo()['callback_object']->getEntity();

  // Check for new account.
  $register = $account->isAnonymous();
  $admin_create = $register && $account->access('create');

  $name = $form_state->getValue('name');
  $mail = $form_state->getValue('mail');;

  if ($admin_create && \Drupal::currentUser()->hasPermission('remotedbuser.create')) {
    // An administrator is creating an account.
    if ($form_state->getErrors()) {
      // Don't continue in case of other errors.
      return;
    }

    // Get account from the remote database, if it exists.
    $remote_account = $storage->loadBy($mail, RemotedbUserStorageInterface::BY_MAIL);
    if ($remote_account) {
      // Account exists. Make sure that the chosen username is not already taken if the
      // remote account has an other username.
      if ($remote_account->name != $name) {
        if (!$storage->validateName($name, $account)) {
          // @todo make this a constraint?
          $form_state->setErrorByName('name', t('The name %name is already taken.', ['%name' => $name]));
        }
      }
    }
  }
  else {
    // The account is an existing account or the account is not created by an administrator.
    // Validate new or changing username.
    if ($name) {
      if (!$storage->validateName($name, $account)) {
        $message = t('The name %name is already taken.', ['%name' => $name]);
        if (remotedbuser_get_remote_user_access()) {
           $message = t('An user with the name %name already exists on the remote database. You can copy this user over on the <a href="@link">@title</a> page.', [
             '%name' => $name,
             '@link' => Url::fromRoute('remotedbuser.get_remote_user_form')->toString(),
             '@title' => t('Get remote user'),
           ]);
        }
        $form_state->setErrorByName('name', $message);
      }
    }

    // Validate the e-mail address, and check if it is taken by an existing user in the remote database.
    if (!$storage->validateMail($mail, $account)) {
      // The mail address is already taken.
      if (\Drupal::currentUser()->isAuthenticated()) {
        // An authenticated user is editing account data.
        $message = t('The e-mail address %email is already taken.', ['%email' => $mail]);
        if (remotedbuser_get_remote_user_access()) {
           $message = t('An user with the e-mail address %email already exists on the remote database. You can copy this user over on the <a href="@link">@title</a> page.', [
             '%email' => $mail,
             '@link' => Url::fromRoute('remotedbuser.get_remote_user_form')->toString(),
             '@title' => t('Get remote user'),
           ]);
        }
        $form_state->setErrorByName('mail', $message);
      }
      else {
        $form_state->setErrorByName('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', ['%email' => $mail, '@password' => Url::fromRoute('user.pass')->toString()]));
      }
    }
  }
}
