<?php

namespace Drupal\remotedb_sso\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\remotedb\Exception\RemotedbException;
use Drupal\remotedb_sso\TicketServiceInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Controller for remotedb_sso routes.
 */
class SsoController extends ControllerBase {

  /**
   * The current active user.
   *
   * @var \Drupal\Core\Session\AccountProxyInterface
   */
  protected $currentUser;

  /**
   * The service for requesting tickets from the remote database.
   *
   * @var \Drupal\remotedb_sso\TicketServiceInterface|null
   */
  protected $ticketService;

  /**
   * Constructs a new SsoController object.
   *
   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
   *   The current active user.
   * @param \Drupal\remotedb_sso\TicketServiceInterface $ticket_service
   *   (optional) The service for requesting tickets from the remote database.
   */
  public function __construct(AccountProxyInterface $current_user, TicketServiceInterface $ticket_service = NULL) {
    $this->currentUser = $current_user;
    $this->ticketService = $ticket_service;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    try {
      $ticket_service = $container->get('remotedb_sso.ticket');
    }
    catch (RemotedbException $e) {
      // Log remotedb exceptions, but continue.
      $e->logError();
      $ticket_service = NULL;
    }

    return new static(
      $container->get('current_user'),
      $ticket_service
    );
  }

  /**
   * Logs in the specified user.
   *
   * @param int $remotedb_uid
   *   User ID from the central database.
   * @param int $timestamp
   *   Timestamp generated by the central database.
   * @param string $hashes_pass
   *   Hash generated by the central database.
   *
   * @todo Implement as action?
   */
  public function login($remotedb_uid, $timestamp, $hashed_pass, $path) {
    $target_path = $this->generateTargetPath(func_get_args(), 3);
    $options = [];

    if (!empty($_GET)) {
      $query = $_GET;
      unset($query['q']);
    }
    if (!empty($query)) {
      $options['query'] = $query;
    }

    if ($this->currentUser->isAuthenticated()) {
      // An user is already logged in, so ignore the attempt and go to the target
      // url.
      //drupal_goto($target_path, $options);
      return $this->redirect('user.page');
    }

    if (!$remotedb_uid) {
      // The user anonymous, so ignore the attempt and go to the target url.
      drupal_goto($target_path, $options);
    }

    try {
      $ticket_service = Util::getTicketService();
      if ($ticket_service) {
        $remote_account = $ticket_service->validateTicket($remotedb_uid, $timestamp, $hashed_pass);
        if ($remote_account) {
          // Ticket is valid. Update account data in local database.
          $account = $remote_account->toAccount();
          $account->save();

          // Reload the user's account object to ensure a full user object is
          // passed along to the various hooks.
          // @FIXME
          $account =
            // To reset the user cache, use EntityStorageInterface::resetCache().
          \Drupal::entityTypeManager()->getStorage('user')->load($account->Id());

          // Now login the user.
          $user = $account;
          user_login_finalize();
        }
      }
    }

    catch (RemotedbException $e) {
      // Log any remote database exceptions.
      $e->logError(WATCHDOG_WARNING);
    }
    drupal_goto($target_path, $options);
  }

  /**
   * Redirect the user to the website they wish to login at.
   *
   * @param \Symfony\Component\HttpFoundation\Request $request
   *   The http request.
   */
  public function goto(Request $request) {
    // Check if the ticket service is available.
    if (empty($this->ticketService)) {
      throw new NotFoundHttpException();
    }

    // Get the site to go to.
    $site = $request->query->get('site');
    if (!$site) {
      throw new NotFoundHttpException();
    }

    // Get path, if there is one.
    $path = $request->query->get('path');

    // Get ticket.
    $ticket = $this->ticketService->getTicket($this->currentUser);

    // Generate url to redirect to.
    $url_parts = [
      'http://',
      $site,
      'sso/login',
      $ticket,
      $path,
    ];
    // Filter out empty parts.
    $url_parts = array_filter($url_parts);
    $url = implode('/', $url_parts);
die($url);
    return new TrustedRedirectResponse($url, 307);
  }

  /**
   * Generate a drupal path based on the given arguments.
   *
   * @param array $args
   *   An array of path parts.
   * @param int $count
   *   The number of arguments to ignore.
   *
   * @return string
   */
  protected function generateTargetPath(array $args, $count = 1) {
    while ($count-- > 0) {
      array_shift($args);
    }
    return implode('/', $args);
  }

}
